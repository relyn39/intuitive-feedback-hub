
-- Create a new table to store topic analysis results
CREATE TABLE public.topic_analysis_results (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,
    topics JSONB,
    status TEXT NOT NULL DEFAULT 'pending', -- e.g., 'pending', 'running', 'completed', 'failed'
    error_message TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    completed_at TIMESTAMPTZ
);

COMMENT ON TABLE public.topic_analysis_results IS 'Stores the results of topic analysis runs, allowing for incremental updates.';
COMMENT ON COLUMN public.topic_analysis_results.topics IS 'The JSON array of topics generated by the analysis.';
COMMENT ON COLUMN public.topic_analysis_results.status IS 'The current status of the analysis job.';

-- Enable Row Level Security
ALTER TABLE public.topic_analysis_results ENABLE ROW LEVEL SECURITY;

-- Create RLS policy for the new table
CREATE POLICY "Users can manage their own topic analysis results"
ON public.topic_analysis_results
FOR ALL
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Add a column to the feedbacks table to track which ones have been analyzed for topics.
ALTER TABLE public.feedbacks
ADD COLUMN IF NOT EXISTS is_topic_analyzed BOOLEAN NOT NULL DEFAULT FALSE;

COMMENT ON COLUMN public.feedbacks.is_topic_analyzed IS 'Flag to indicate if the feedback has been included in a topic analysis.';
